vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector<pair<pair<int, int>, int>> &g)
{
    // Write your code here.
    vector<pair<int,int>> adj[n+1];
    for(int i=0;i<g.size();i++){
        int u = g[i].first.first;
        int v = g[i].first.second;
        int w = g[i].second;
        
        adj[u].push_back({v,w});
        adj[v].push_back({u,w});
    }
    
    vector<int> key(n+1,1e9); //assume as diatance array
    vector<int> parent(n+1,-1);
    vector<bool> mst(n+1, false);
    key[1] = 0;
    parent[1] = -1;
    
    for(int i=1;i<n;i++){
        int mini = 1e9, u;
        for(int v = 1;v<=n;v++){ 
            if(mst[v]== false && key[v] < mini){
                mini = key[v];
                u = v; 
            }
        }
         mst[u] = true;
          for(auto i: adj[u]){
            int v = i.first;
            int w = i.second;
            if(!mst[v] && w < key[v]) {
                key[v] = w;
                parent[v] = u;
            }
           }
        }    
    
    vector<pair<pair<int,int>,int>> result;
    for(int i=2;i<=n;i++){
            result.push_back({{parent[i],i}, key[i]});
    }
    return result;
}



// using bfs

// vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector<pair<pair<int, int>, int>> &g)
// {
//     unordered_map<int, list<pair<int, int>>> adj;
//     for(int i=0;i<m;i++){
//         int u = g[i].first.first;
//         int v = g[i].first.second;
//         int w = g[i].second;        
//         adj[u].push_back(make_pair(v, w));
//         adj[v].push_back(make_pair(u, w));
//     }
//     priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
//     vector<int> parent(n+1, -1);
//     vector<bool> mst(n+1, false);
//     vector<int> key(n+1, INT_MAX);

//     key[0] = 0;
//     key[1] = 0;
//     pq.push({0, 1});
//     while(!pq.empty()){
//         int node = pq.top().second;
//         pq.pop();
//         mst[node] = true;

//         for(auto it:adj[node]){
//             int next = it.first;
//             int wt = it.second;
//             if(mst[next]==false and wt<key[next]){
//                 key[next] = wt;
//                 parent[next] = node;
//                 pq.push({key[next], next});
//             }

//         }
//     }
//     vector<pair<pair<int, int>, int>> ans;
//     for(int i=2;i<=n;i++){
//         ans.push_back({{parent[i], i}, key[i]});
//     }
//     return ans;
// }

