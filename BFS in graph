#include<bits/stdc++.h>
void solve_bfs(int src, vector<int> adj[], vector<bool> &visit, vector<int> &ans)
{
    visit[src] = 1;
    queue<int> q;
    q.push(src);
    while(!q.empty()){
        int node = q.front();
        ans.push_back(node);
        q.pop();
        for(auto it: adj[node]){
            if(!visit[it]){
                visit[it] = 1;
                q.push(it);
            }
        }
    }
     
}
vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    // Write your code here
    
    vector<int> adj[vertex];
    
    for(int i=0;i<edges.size();i++)
    {
        int u,v;
        u = edges[i].first;
        v = edges[i].second;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
// int m=edges.size(); another way of pushing elements in adj
//    for(int i=0;i<m;i++){
//        adj[edges[i].first].push_back(edges[i].second);
//        adj[edges[i].second].push_back(edges[i].first);
//    }
    for(int i=0;i<vertex;i++){
        sort(adj[i].begin(), adj[i].end());
    }
    vector<bool> visit(vertex,0);
    vector<int> ans;
   for(int i=0;i<vertex;i++){
       if (visit[i] == 0){
           solve_bfs(i,adj,visit,ans);
       }
   }
   return ans;
}


steps 
make a visited array
mark as visited means 1 when we vist for first time
and print that node means that is traversed
Note: in this we are sorting because the output must be in sorted order
