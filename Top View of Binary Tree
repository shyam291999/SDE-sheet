/************************************************************

    Following is the TreeNode class structure:

    template <typename T>
    class TreeNode {
       public:
        T val;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T val) {
            this->val = val;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
#include<bits/stdc++.h>
vector<int> getTopView(TreeNode<int> *root) {
    // Write your code here.
    vector<int> ans;
    if(!root) return ans;
    
    queue<pair<TreeNode<int>*,int>> q;
    map<int,int> mpp;  //mpp will contain imaginary line at it.first and node at second
    q.push({root, 0});
    
    while(!q.empty()){
        auto it = q.front();
         q.pop();
        TreeNode<int> *node = it.first;
        int line = it.second;
       
        if(mpp.find(line) == mpp.end()) mpp[line] = node->val;
        
        if(node->left) q.push({node->left, line - 1});
        if(node->right) q.push({node->right, line + 1});   
    }
    for(auto it: mpp){
        ans.push_back(it.second);
    }
    return ans;
}



push the node in q with a pair 
and map will contain only the non repeating element and the first occurance of -1,0,1...etc
map.find will find that line is previously present in map or not if not then we will add else we will continue
