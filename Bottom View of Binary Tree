/*************************************************************
 
    Following is the Binary Tree node structure.

    class BinaryTreeNode 
    {
    public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

*************************************************************/

vector<int> bottomView(BinaryTreeNode<int> * root){

    // Write your code here.
    
    vector<int> ans;
    if(!root) return ans;
    
    queue<pair<BinaryTreeNode<int>*, int>> q;
    map<int,int> mpp; // will contail line,node
    q.push({root, 0});
    
    while(!q.empty()){
        auto it = q.front();
        q.pop();
        BinaryTreeNode<int> * node = it.first;
        int line = it.second;
        
        mpp[line] = node->data; // last visit at that line will appera form bottom
        
        if(node->left) q.push({node->left, line - 1});
        if(node->right) q.push({node->right, line + 1});    
    }
    for(auto it: mpp){
        ans.push_back(it.second);
    }
    return ans;
}


using the same logic of top view in this the only difference is we are updating the node value at line mpp[line] = node->data
because the last visitied line node will be seen from bottom view
and remaining will be same
